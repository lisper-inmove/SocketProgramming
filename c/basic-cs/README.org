#+STARTUP: indent
* Socket Programing in c
原文: [[https://www.binarytides.com/socket-programming-c-linux-tutorial/][Socket programming in C on Linux – The Ultimate Guide for Beginners]]

** Server
1. Create socket file descriptor
   #+begin_src C
     int socket_desc = socket(AF_INET, SOCK_STREAM, 0);
   #+end_src

2. Init server sockaddr info
   #+begin_src C
     struct sockaddr_in server, client;
     server.sin_family = AF_INET;
     server.sin_addr.s_addr = INADDR_ANY;
     server.sin_port = htons(1234);
   #+end_src

3. Bind socket file descriptor with sockaddr info
   #+begin_src C
     bind(socket_desc, (struct sockaddr *)&server, sizeof(server));
   #+end_src

4. Start listen
   #+begin_src C
     listen(socket_desc, 16);
   #+end_src
   Marks the socket referred to by sockfd as a passive socket(被动接受连接的套接字), that is, as a socket that will be used to accept incoming connection requests using accept

5. Waiting for client to connect
   #+begin_src C
     int c = sizeof(struct sockaddr_in);
     accept(socket_desc, (struct sockaddr *)&client, (socklen_t *)&c);
   #+end_src

** Client
1. Create socket file descriptor
   #+begin_src C
     int socket_desc = socket(AF_INET, SOCK_STREAM, 0);
   #+end_src

2. Init server sockaddr info
   #+begin_src C
     struct sockaddr_in server;
     server.sin_addr.s_addr = inet_addr("127.0.0.1");
     server.sin_family = AF_INET;
     server.sin_port = htons(1234);
   #+end_src

3. Connect to server
   #+begin_src C
     connect(socket_desc, (struct sockaddr *)&server, sizeof(server));
   #+end_src

* socket function
#+begin_src C
  #include <sys/types.h>          /* See NOTES */
  #include <sys/socket.h>
  int socket(int domain, int type, int protocol);
#+end_src
以下信息来自 man socket Ubuntu 20.04
The domain argument specifies a communication domain; this selects the protocol family which will be used for communication.
1. AF_UNIX/AF_LOCAL: Local communication.
2. AF_INET: IPv4 Internet protocols.
3. AF_INET6: IPv6 Internet protocols.

The type argument specifies the communication semantics.
1. SOCK_STREAM: Provides sequenced, reliable, two-way, connection-based byte streams.
2. SOCK_DGRAM: Supports datagrams (connectionless, unreliable messages of a fixed maximum length)

Since  Linux  2.6.27,  the type argument serves a second purpose: in addition to specifying a socket type, it may include the
bitwise OR of any of the following values, to modify the behavior of socket():
1. SOCK_NONBLOCK: Set the O_NONBLOCK file status flag on the open file description, referred to by the new file descriptor.
2. SOCK_CLOEXEC: Set close-on-exec(FD_CLOEXEC) for new file descriptor.
